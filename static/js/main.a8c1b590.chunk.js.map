{"version":3,"sources":["packages/api/makeRequest.js","packages/api/rest/questions.js","packages/api/index.js","MainQuestions/index.js","MainQuestions/useGetQuestions.js","App.js","reportWebVitals.js","index.js"],"names":["url","method","params","data","headers","axios","getQuestions","a","makeRequest","response","questions","MainQuestion","useState","setQuestions","useEffect","api","length","console","log","fetchQuestions","useGetQuestions","App","MainQuestions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEe,cAMR,IAAD,IALJA,WAKI,MALE,IAKF,MAJJC,cAII,MAJK,MAIL,MAHJC,cAGI,MAHK,GAGL,MAFJC,YAEI,MAFG,GAEH,MADJC,eACI,MADM,GACN,EACJ,OAAOC,IAAM,CACXL,MACAC,SACAG,UACAF,SACAC,UCZSG,EAAY,uCAAG,4BAAAC,EAAA,sEACHC,EAAY,CACjCR,IAAI,uHACJC,OAAQ,MACRE,KAAM,KAJkB,cACpBM,EADoB,yBAOnBA,EAASC,WAPU,2CAAH,qDCAV,GACbA,aCMaC,MAPf,WACE,IAAMD,ECCO,WAAO,IAAD,EACeE,mBAAS,IADxB,mBACZF,EADY,KACDG,EADC,KAmBnB,OAhBAC,qBAAU,WAAM,4CACd,4BAAAP,EAAA,+EAE4BQ,EAAIL,UAAUJ,eAF1C,QAEUI,EAFV,QAIkBM,OAAS,GACrBH,EAAaH,GALnB,gDAQIO,QAAQC,IAAR,MARJ,0DADc,uBAAC,WAAD,wBAadC,KACC,IAEIT,EDpBWU,GAGlB,OADAH,QAAQC,IAAI,eAAgBR,GACrB,wCE8BM,SAASW,IACtB,OAAO,cAACC,EAAD,ICrCT,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8c1b590.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default ({\n  url = \"/\",\n  method = \"get\",\n  params = {},\n  data = {},\n  headers = {}\n}) => {\n  return axios({\n    url,\n    method,\n    headers,\n    params,\n    data\n  });\n};\n","import makeRequest from \"../makeRequest\";\n\nexport const getQuestions = async () => {\n  const response = await makeRequest({\n    url: `https://api.stackexchange.com/2.2/questions?order=desc&sort=activity&site=stackoverflow&key=qBt3pH)yY2*kx96ogUORkA((`,\n    method: \"GET\",\n    data: {}\n  });\n\n  return response.questions;\n};\n\n","import * as questions from \"./rest/questions\";\n\nexport default {\n  questions\n};\n","import useGetQuestions from \"./useGetQuestions\";\n\nfunction MainQuestion() {\n  const questions = useGetQuestions();\n\n  console.log(\"questions = \", questions);\n  return <h1>Hello</h1>;\n}\n\nexport default MainQuestion;\n","import { useState, useEffect } from \"react\";\n\nimport api from \"../packages/api\";\n\nexport default () => {\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    async function fetchQuestions() {\n      try {\n        const questions = await api.questions.getQuestions();\n\n        if (questions.length > 0) {\n          setQuestions(questions);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchQuestions();\n  }, []);\n\n  return questions;\n};","// import Header from '../src/Header';\n// import Main from '../src/Main';\n// import Users from '../src/Users';\n// import Tags from '../src/Tags';\n// import Footer from '../src/Footer';\n// import UserId from '../src/users/UserId';\n// import { BrowserRouter, Route} from 'react-router-dom';\n// import OneTag from './tags/OneTag';\n// import QuestionId from './questions/QuestionId';\n// import GetData from '../src/GetData';\n\n// function App() {\n//   return (\n//     <BrowserRouter basename={process.env.PUBLIC_URL}>\n//     <div className=\"App\">\n//      <Header/>\n//          <Route exact path='/' component={Main}/>\n//          <Route exact path='/questions/:questionId' component={QuestionId}/>\n//          <Route exact path='/users' component={Users}/>\n//          <Route path='/users/:userID' component={UserId}/>\n//          <Route exact path='/tags' component={Tags}/>\n//          <Route path='/tags/:tagName' component={OneTag}/>\n//          <Route path='/getdata' component={GetData}/>\n\n//        <Footer/>\n//        </div>\n       \n//      </BrowserRouter>\n    \n//   );\n// }\n\n// export default App;\n\nimport MainQuestions from \"./MainQuestions\";\n\nexport default function App() {\n  return <MainQuestions />;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n\n//   componentDidMount() {\n//     this.timerID = setInterval(\n//       () => this.tick(),\n//       1000\n//     );\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.timerID);\n//   }\n\n//   tick() {\n//     this.setState({\n//       date: new Date()\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>Привет, мир!</h1>\n//         <h2>Сейчас {this.state.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n\n// ReactDOM.render(\n//   <Clock />,\n//   document.getElementById('root')\n// );"],"sourceRoot":""}